import com.mchange.fossilphant.*

val lpwc = tup(0)
val showInReplyTo = tup(1)

val post = lpwc.post
val context = lpwc.context

val zdt = post.published.atZone(context.config.timestampTimezone)

def makePostId(localId : String) = s"post-${localId}"

val postId = makePostId(post.localId)

(tup : Tuple2[LocatedPostWithContext,Boolean])[]~()>

<div class="post" id="<( postId )>">
  <div class="post-timestamp">
    <div><a href="#<( postId )>"><( formatShortDate( zdt ) )><br>
                                 <( formatShortTime( zdt ) )></a></div>
  </div>
  <div class="avatar-names">
      <div class="avatar"><a name="<( postId )>"><img src="##avatar" /></a></div>
      <div class="post-display-name"><( lpwc.userDisplayName )></div>
      <div class="post-user">@<( post.user )></div>
  </div>
  <div class="post-content"><( post.content )></div>
<()
  if showInReplyTo then {
    val mbLink =post.inReplyTo match
      case InReplyTo.NoOne           => None
      case InReplyTo.Self( irtLocalId ) => Some( s"""<a href="#${makePostId(irtLocalId)}">myself</a>""" )
      case InReplyTo.Other( url ) =>
        url match
          case StatusUrlRegex(irtHost, irtUser, irtLocalId) => Some( s"""<a href="${url}">@${irtUser}</a>""" )
          case other => Some( s"""<a href="${url}">this</a>""" )
    mbLink.foreach { link =>
()>
  <div class="post-in-reply-to">in reply to <( link )></div>
<()
    }
  }
  post.images.foreach { image =>
    writer.write( image_html( lpwc.siteRootedLocation, image ).text )
  }
()>
</div>