//| mill-version: 1.0.6
//| mill-jvm-version: 21
//| mvnDeps: ["com.mchange::untemplate-mill:0.3.0-SNAPSHOT"]
//+-------------------------------------------------------------------------------------------------------------------------------------------------------

package build

import mill.*, scalalib.*, publish.*

import untemplate.mill.*

val UnstaticVersion = "0.4.0-SNAPSHOT"

object Dependency:
  val Unstatic       = mvn"com.mchange::unstatic:${UnstaticVersion}"
  val UnstaticZTapir = mvn"com.mchange::unstatic-ztapir:${UnstaticVersion}"
  val JArchiveLib    = mvn"org.rauschig:jarchivelib:1.2.0"
  val OsLib          = mvn"com.lihaoyi::os-lib:0.11.5"
  val Upickle        = mvn"com.lihaoyi::upickle:4.4.0"


object `package` extends UntemplateModule with PublishModule:
  val projectName    = "fossilphant"
  val projectVersion = "0.1.0-SNAPSHOT"

  override def scalaVersion = Task("3.3.6")

  // we'll build an index!
  override def untemplateIndexNameFullyQualified : Option[String] = Some("com.mchange.fossilphant.IndexedUntemplates")

  override def untemplateSelectCustomizer: untemplate.Customizer.Selector =
    key => untemplate.Customizer.empty.copy(extraImports=Seq("com.mchange.fossilphant.*"))

  override def mvnDeps = Task {
    super.mvnDeps() ++
      Seq (
        Dependency.Unstatic,
        Dependency.UnstaticZTapir,
        Dependency.JArchiveLib,
        Dependency.OsLib,
        Dependency.Upickle,
      ) // Seq
  }

//  def scalacOptions = Task:
//    super.scalacOptions() ++ Seq("-explain")

  override def publishVersion = Task( projectVersion )
  override def pomSettings    = Task:
    PomSettings(
        description = "A static site generator generator for Mastodon archives",
        organization = "com.mchange",
        url = s"https://github.com/swaldman/${projectName}",
        licenses = Seq(License.`AGPL-3.0`),
        versionControl = VersionControl.github("swaldman", projectName),
        developers = Seq(
          Developer("swaldman", "Steve Waldman", "https://github.com/swaldman")
      )
    )

  def releasable : T[Unit] = Task {
    val ensurePublishable = publishArtifactsDefaultPayload()
    val ensureScripts = script.gen()
  }

  object script extends Module:
    val shebangLine = "#!/usr/bin/env -S scala-cli shebang"
    val declineVersion = "2.5.0"
    val scriptScalaVersion = "3.3.6" // can be more recent than the main project scala version!
    val scriptJvm = "21"
    val scriptName = "fossilphant.sc"
    val shebangScriptName = "fossilphant"
    def sources = Task.Source("template")
    def gen = Task:
      val scriptsrcFile = sources().path / scriptName
      val scriptsrc = os.read(scriptsrcFile)
      val script =
        scriptsrc
          .replace("%SCALA_VERSION%", scriptScalaVersion)
          .replace("%DECLINE_VERSION%", declineVersion)
          .replace("%FOSSILPHANT_VERSION%", projectVersion)
          .replace("%JVM%", scriptJvm)
      val scriptOutPath = Task.dest / scriptName
      os.write(scriptOutPath, script )
      val shebangOutPath = Task.dest / shebangScriptName
      os.write(shebangOutPath, shebangLine + '\n' + script)
      os.perms.set(shebangOutPath,"rwxr-xr-x")
      Seq(scriptOutPath,shebangOutPath).map( PathRef(_) )

